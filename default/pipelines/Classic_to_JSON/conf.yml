output: default
groups:
  zsSc4u:
    name: PowerShell Passthru
    description: Reduce whitespace  and convert to JSON with minimal cleanup.
    index: 3
    disabled: false
  aGUgpE:
    name: EventCode Passthru
    description: Add any EventCodes to the TEMPLATE_EventCode_Passthru.csv lookup
      table and convert to JSON with minimal cleanup and finalized,
    index: 5
    disabled: false
  yalV7t:
    name: Unique Masking
    description: When the default Mask above does not properly parse the event you
      can create a new Mask to ensure the __bottomMessage is created properly.
    index: 11
  sNCI0F:
    name: Message Processing
    description: Based on the contents of the Message, segment to top and/or bottom
      and if XML, process accordingly.
    index: 15
    disabled: false
  S3tT36:
    name: Message Drop
    description: "Default: Off - Drop Message if LogName and EventCode are in the
      lookup table"
    index: 17
    disabled: false
  8LP9fF:
    name: Make multivalued array fields
    description: Serialize all the user related field, push them into an internal
      __arrayField, then use Regex to pull out the multi-value keys.
    index: 21
asyncFuncTimeout: 1000
functions:
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: "IMPORTANT:  Select the three grey bars ||| top left and enable the
        Description option"
  - id: regex_extract
    filter: "true"
    disabled: false
    conf:
      source: _raw
      iterations: 100
      overwrite: true
      regex: /EventCode=(?<__EventCode>\d+)/
      regexList: []
    final: false
    description: Extract the EventCode to an internal field.
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Default On - PowerShell events should not be parsed because they
        contain scripts in the Message are converted to JSON with minimal
        cleanup and finalized
  - id: eval
    filter: /PowerShell/i.test(_raw)
    disabled: false
    conf:
      add:
        - name: __passthru
          value: "'true'"
        - name: _raw
          value: _raw.replace(/(?:\s*)?(\r*)?\n/gm,'\n')
        - name: _raw
          value: _raw.replace(/(\s+)?([=:|,])(\s+)/gm,'$2')
        - name: _raw
          value: _raw.replace(/\t/g,'')
        - name: _raw
          value: _raw.replace(/^.\n/gm,'\n')
        - name: _raw
          value: _raw.replace(/^-$/gm,'')
        - name: _raw
          value: _raw.replace(/\. +/gm,'. ')
        - name: _raw
          value: _raw.replace(/ {2,}/gm,' ')
      remove: []
    description: If an EventCode matches, just pass the event to the Destination
      untouched and clean up unnecessary whitespace for reduction and finalize
      event processing.
    final: false
    groupId: zsSc4u
  - id: comment
    filter: "true"
    disabled: false
    conf:
      comment: Default On - Any EventCodes in the lookup table will be converted to
        JSON with minimal cleanup and finalized,
  - id: eval
    filter: C.Lookup(C.vars.EventCode_Passthru,'EventCode').match(__EventCode)
    disabled: false
    conf:
      add:
        - name: __passthru
          value: "'true'"
        - name: _raw
          value: _raw.replace(/ ?\r\r\n/gm,'\n')
        - name: _raw
          value: _raw.replace(/ ?\r+\n/gm,'\n')
        - name: _raw
          value: _raw.replace(/^ +([^ ])/gm,'$1')
        - name: _raw
          value: _raw.replace(/\t/g,'')
        - name: _raw
          value: _raw.replace(/, /gm,',')
        - name: _raw
          value: "_raw.replace(/: +/gm,':')"
        - name: _raw
          value: _raw.replace(/^-$/gm,'')
        - name: _raw
          value: _raw.replace(/\n{3,}/gm,'\n')
        - name: _raw
          value: _raw.replace(/\. +/gm,'. ')
        - name: _raw
          value: _raw.replace(/ {2,}/gm,' ')
        - name: _raw
          value: _raw.replace(/ = /g,'=')
      remove: []
    description: If an EventCode matches, just pass the event to the Destination
      untouched and clean up unnecessary whitespace for reduction and finalize
      event processing.
    final: false
    groupId: aGUgpE
  - id: regex_extract
    filter: __passthru=='true'
    disabled: false
    conf:
      source: _raw
      iterations: 100
      overwrite: true
      regex: /^(?<__preMessage>[\S\s]+)Message=(?<Message>[\S\s]+)/
    groupId: aGUgpE
    final: false
    description: Extract the top of the event and the entire Message body
  - id: serde
    filter: __passthru=='true'
    disabled: false
    conf:
      mode: extract
      type: kvp
      srcField: __preMessage
      cleanFields: false
      allowedKeyChars: []
      allowedValueChars: []
      remove: []
    groupId: aGUgpE
    final: false
    description: Parse Key Values from the internal __preMessage field
  - id: serialize
    filter: __passthru=='true'
    disabled: false
    conf:
      type: json
      dstField: _raw
      fields:
        - "!_*"
        - "!cribl_*"
        - "!index"
        - "!host"
        - "!source"
        - "!sourcetype"
        - "!hf"
        - "!punct"
        - "!Date_And_Time"
        - "*"
      cleanFields: false
    description: Serialize keys to _raw
    final: false
    groupId: aGUgpE
  - id: eval
    filter: __passthru=='true'
    disabled: false
    conf:
      add: []
      keep:
        - _*
        - cribl_*
        - index
        - source
        - sourcetype
        - host
        - hf
        - punct
      remove:
        - "*"
    description: Convert from JSON string to JSON object and finalize processing &
      drop all unnecessary fields
    final: false
    groupId: aGUgpE
  - id: serde
    filter: __passthru=='true'
    disabled: false
    conf:
      mode: extract
      type: json
      srcField: _raw
      fieldFilterExpr: value!='-' && value!='NOT_TRANSLATED' && value!='<null>'
      dstField: _raw
    groupId: aGUgpE
    final: true
  - id: regex_extract
    filter: "true"
    disabled: false
    conf:
      source: _raw
      iterations: 100
      overwrite: true
      regex: /^(?<__preMessage>[\S\s]+)Message=(?<__topMessage>.+)$([\r\n]+(?<__bottomMessage>[\S\s]+))?/m
      regexList: []
    final: false
    description: Extract the top, first line of the Message and the remainder to
      three internal fields.
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Create sections from Message and take top key and prepend to all
        sub-keys to ensure proper key names
  - id: code
    filter: "true"
    disabled: false
    conf:
      maxNumOfIterations: 5000
      code: >-
        /* Split __bottomMessage into an array of elements */

        __e['__blocks_1'] = __e['__bottomMessage'].replace(/\r\r\n/g,'\r\n').split('\r\n\r\n')


        for (let i = 0; i < __e['__blocks_1'].length; i++) {
            let block = __e['__blocks_1'][i];
            var block_lines = block.split('\r\n');
            if (block_lines.length > 1) {
                var prepend_key = block_lines[0].replace(/[: \r\n]+$/, '');
                for (let j = 1; j < block_lines.length; j++) {
                    block_lines[j] = block_lines[j].replace(/^(\W+)/, `$1${prepend_key} `);
                }
                __e['__blocks_1'][i] = block_lines.join('\r\n')
            }  
        }


        __e['__bottomMessage'] = __e['__blocks_1'].join('\r\n\r\n')

        delete __e['__blocks_1']
    final: false
    description: Create sections from Message and take top key and prepend to all
      subkeys to ensure proper key names
  - id: mask
    filter: __EventCode!='4661'
    disabled: false
    conf:
      rules:
        - matchRegex: /_/g
          replaceExpr: "'###UP###'"
        - matchRegex: /\r+\n\t\t+/g
          replaceExpr: "'###SEP###'"
        - matchRegex: /\s+\r\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\s+\r\n\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\s+\r\n\s+/g
          replaceExpr: "'___'"
        - matchRegex: /\r\n\s+/g
          replaceExpr: "'___'"
        - matchRegex: /:\s+/g
          replaceExpr: "':__'"
        - matchRegex: /\s+:/g
          replaceExpr: "':'"
        - matchRegex: /:###SEP###/g
          replaceExpr: "':__'"
        - matchRegex: /\s=\s/g
          replaceExpr: "'='"
      fields:
        - __bottomMessage
      depth: 5
    description: Create a normalize schema for the __bottomMessage.  The Filter
      excludes events that don't parse using the Mask function below.
    final: false
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Mask Template Exceptions are place in the following group.
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: "If you run into any situation where the event is simply not parsing
        properly, please contact me on Community Slack in the #packs channel and
        I am happy to assist."
    groupId: yalV7t
  - id: mask
    filter: __EventCode=='4661'
    disabled: false
    conf:
      rules:
        - matchRegex: /_/g
          replaceExpr: "'###UP###'"
        - matchRegex: /\r\n\s\t/g
          replaceExpr: "'____'"
        - matchRegex: /\r\n\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\r\n\t/g
          replaceExpr: "'___'"
        - matchRegex: /\t\t/g
          replaceExpr: "'__'"
        - matchRegex: /\t/g
          replaceExpr: "'__'"
        - matchRegex: /\s\r\r\n\r\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\s\r\r\n\s+/g
          replaceExpr: "'___'"
        - matchRegex: /\s\s\r\r\n/
          replaceExpr: "'__'"
        - matchRegex: /\s\r\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\r\r\n\r\r\n/g
          replaceExpr: "'____'"
        - matchRegex: /\r\r\n\t\t\t\t/g
          replaceExpr: "'___'"
        - matchRegex: /:\s+/g
          replaceExpr: "':__'"
        - matchRegex: /\r____+/g
          replaceExpr: "'###SEP###'"
        - matchRegex: /_____/g
          replaceExpr: "'###SEP###'"
        - matchRegex: /\r\r\n/g
          replaceExpr: "'###SEP###'"
        - matchRegex: /\r_/g
          replaceExpr: "'_'"
        - matchRegex: /---___/g
          replaceExpr: "'---###SEP###'"
        - matchRegex: /###SEP###_/g
          replaceExpr: "'###SEP###'"
      fields:
        - __bottomMessage
      depth: 5
    description: Security Template - Put most events into a common schema
    final: false
    groupId: yalV7t
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: >-
        Extract all Name : Values from the __bottomMessage field to top level
        fields.  The <_NAME_0> and <_VALUE_0> is a special capture group that
        dynamically creates the field NAME from the first capture group and
        inserts the VALUE from the second capture group for N number of matches,
        configured in the Advanced Settings of the Regex Extract function.


        (?<_NAME_0>[\p{L}][0-9-\s'’\p{L}]+):_{1,2}(?<_VALUE_0>[^_\r\n]+)


        Regex Flags:

        g: global

        u: unicode


        Note:

        \p{L} matches a single code point in the category "letter".

        \p{N} matches any kind of numeric character in any script.
  - id: regex_extract
    filter: "true"
    disabled: false
    conf:
      source: __bottomMessage
      iterations: 1000
      overwrite: false
      regex: /(?<_NAME_0>[\p{L}][()0-9-\s'’\p{L}]+):_{1,2}(?<_VALUE_0>[^_\r\n]+)/gu
      fieldNameExpression: name.replace(/ /g,'_').replace(/[()]/g,'_').replace(/['’]/g,'')
      regexList: []
    description: Regular expression to handle all languages for the Key names
      extracting the Keys to the top level.
    final: false
  - id: serde
    filter: "true"
    disabled: false
    conf:
      mode: extract
      type: kvp
      srcField: __preMessage
      cleanFields: false
      allowedKeyChars: []
      allowedValueChars: []
      fields: []
      remove: []
      keep:
        - "*"
    description: Extract Key Value pairs from the internal __preMessage field (4726)
    final: false
  - id: comment
    filter: "true"
    disabled: false
    conf:
      comment: Convert Messages that contain XML to JSON and retain all attributes
    groupId: sNCI0F
  - id: eval
    filter: __bottomMessage.includes('<?xml version') &&
      !__bottomMessage.includes('stack trace')
    disabled: false
    conf:
      add:
        - value: C.Text.parseXml(__bottomMessage,true,true)
          name: Message
    description: Evaluate __Message for XML content and extract fields accordingly
    final: false
    groupId: sNCI0F
  - id: comment
    filter: "true"
    disabled: false
    conf:
      comment: Create Message key from the internal __topMessage key
    groupId: sNCI0F
  - id: eval
    filter: "!__bottomMessage.includes('<?xml version') && __topMessage"
    disabled: false
    conf:
      add:
        - name: Message
          value: __topMessage.trim()
    final: false
    description: No XML and only __topMessage
    groupId: sNCI0F
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Default On - In some events, the Message = Description and we can drop
        the extra key.
  - id: comment
    filter: "true"
    disabled: false
    conf:
      comment: Drop Message field from events using a lookup table based on LogName
        and EventCode
    groupId: S3tT36
  - id: eval
    filter: typeof Message =='string' &&
      C.Lookup(C.vars.Message_EventCode_LogName,'LogName').match(LogName) &&
      C.Lookup(C.vars.Message_EventCode_LogName,'EventCode').match(EventCode)
    disabled: false
    conf:
      remove:
        - Message
    description: Drop Message field from events with a static _raw.Message field
      with no other subfields
    groupId: S3tT36
    final: false
  - id: code
    filter: "true"
    disabled: false
    conf:
      maxNumOfIterations: 5000
      code: >-
        Object.keys(__e)
            // Find fields that do not start with '_' and contains pattern in field value; Returns field names as array.
            .filter(field =>
                !field.startsWith('_') && /###SEP###/.test(__e[field])
            ).forEach(arrayField =>
                // Split on pattern and keep only non-empty elements
                __e[arrayField] = __e[arrayField]
                    .split('###SEP###')
                    .filter(item => item)
            )

        Object.keys(__e)

        .filter(field => !field.startsWith('_') && Array.isArray(__e[field]) && __e[field].length === 1).forEach(arrayField => 

        __e[arrayField] = __e[arrayField][0]

        )
    final: false
    description: "Make arrays from fields containing ###SEP###"
  - id: mask
    filter: "true"
    disabled: false
    conf:
      rules:
        - matchRegex: /###UP###/g
          replaceExpr: "'_'"
        - matchRegex: /\t/g
          replaceExpr: "' '"
      fields:
        - "!_*"
        - "*"
      depth: 5
    description: "Replace ###UP###"
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Create _raw JSON STRING (NOT Object) from the field results from
        __bottomMessage && __topMessage
  - id: serialize
    filter: "true"
    disabled: null
    conf:
      type: json
      dstField: __arrayField
      fields:
        - Target_*
        - Creator_*
        - Subject_*
        - New_Logon_*
        - Account_*
    description: Serialize all the user related field, push them into an internal
      __arrayField,
    groupId: 8LP9fF
    final: false
  - id: regex_extract
    filter: "true"
    disabled: null
    conf:
      source: __arrayField
      iterations: 100
      overwrite: false
      regex: /(?<_KEY_0>[A-Za-z]+_[A-Za-z]+)":"(?<_VALUE_0>[^"]+?)"/
    groupId: 8LP9fF
    final: false
    description: then use Regex to pull out the multi-value keys from the __arrayField
  - id: serialize
    filter: "true"
    disabled: false
    conf:
      type: json
      dstField: _raw
      fields:
        - "!_*"
        - "!cribl_*"
        - "!index"
        - "!host"
        - "!source"
        - "!sourcetype"
        - "!hf"
        - "!punct"
        - "!Date_And_Time"
        - "*"
      cleanFields: false
    description: Create _raw JSON STRING (NOT Object) from the field results from
      __bottomMessage && __topMessage
    final: false
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add: []
      keep:
        - _*
        - cribl_*
        - index
        - source
        - sourcetype
        - host
        - hf
        - punct
        - Account_ID*
        - Security_ID*
        - Target_ID*
        - Creator_ID*
        - Logon_ID*
        - Account_Domain*
        - Account_Name*
      remove:
        - "*"
    description: Drop all unnecessary fields
    final: false
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Default On - Converts a JSON String to a JSON Object
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add:
        - name: _raw
          value: JSON.parse(_raw)
    final: false
    description: Create JSON Object
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Default On - Remove certain values using a Fields Filter Expression
  - id: serde
    filter: "true"
    disabled: false
    conf:
      mode: extract
      type: json
      srcField: _raw
      fieldFilterExpr: value!='NOT_TRANSLATED' && value!='<null>'
      dstField: _raw
    description: Use Parser to remove fields with certain values using the Fields
      Filter Expression
